{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","OnsearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAqBeA,EAnBF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACtB,OACI,yBAAKC,UAAU,uDAGX,yBAAKC,IAAG,+BAA0BF,EAA1B,cAEZ,6BACY,4BAAKF,GACL,2BAAIC,MCeTI,EAvBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEd,OAEJ,6BAGIA,EAAOC,KAAI,SAAEC,EAAMC,GACf,OACI,kBAAC,EAAD,CACJC,IAAKD,EACLP,GAAMI,EAAOG,GAAGP,GAChBF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCGVU,EAdG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC5B,OAEJ,yBAAKV,UAAU,OACf,2BAAOA,UAAU,kCACjBW,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCGI,EAVA,SAACC,GACZ,OACQ,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,WCqDJC,G,kBA9CX,aAAc,IAAD,8BACT,+CAgBJC,eAAiB,SAACC,GACf,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAhBxC,EAAKC,MAAO,CACRxB,OAAS,GACTM,YAAc,IAJT,E,iFAQQ,IAAD,OAChBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OACP,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAWrB,IAAD,EACyBC,KAAKN,MAA3BxB,EADH,EACGA,OAAOM,EADV,EACUA,YACRyB,EAAiB/B,EAAOgC,QAAO,SAAAhC,GACjC,OAAOA,EAAON,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAE1D,OAAQjC,EAAOmC,OAIP,yBAAKtC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWU,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ+B,MAP1B,wBAAIlC,UAAU,MAAd,kB,GA/BMuC,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.4aa4661e.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport 'tachyons';\r\nconst Card = ({name,email,id})=>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\r\n            <img src={`https://robohash.org/${id}?200*200`}/>\r\n       \r\n        <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n        </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots}) => {\r\n    \r\n    return(\r\n\r\n<div>\r\n\r\n{\r\n    robots.map(( user, i) => {\r\n        return (\r\n            <Card \r\n        key={i} \r\n        id = {robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}/>\r\n        )\r\n    })\r\n}\r\n\r\n\r\n</div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return(\r\n\r\n<div className='pa2'>\r\n<input className='pa3 ba b-green bg-lightest-blue' \r\ntype='search' \r\nplaceholder='Search robots'\r\nonChange = {searchChange}\r\n/>\r\n\r\n</div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n            <div style={{overflowY:'scroll',border:'2px solid black',height:'570px'}}>\r\n            {props.children}\r\n\r\n            </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Scroll;","import React ,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport '../containers/App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            robots : [],\r\n            searchfield : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>\r\n            this.setState({robots:users}));\r\n    \r\n        }\r\n\r\n\r\n    OnsearchChange = (event) =>{\r\n       this.setState({searchfield: event.target.value})\r\n        \r\n        }\r\n        \r\n    \r\n    render(){\r\n        const {robots,searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n            <h1 className='tc'>Loading...</h1> :\r\n      \r\n            (\r\n                <div className='tc'>\r\n                    <h1>Robo Friend</h1>\r\n                    <SearchBox searchChange={this.OnsearchChange}/>\r\n                    <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n        );\r\n        \r\n           \r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\n\nimport './index.css';\nimport App from './containers/App';\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}